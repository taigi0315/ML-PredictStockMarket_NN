result
X = test[ ,-ncol(test)]
y = test[ ,ncol(test)]
prediction = predict(theta_training_1, theta_training_2, X)
result = sum(prediction == y) / length(y)
result
lambda = 0.5
num_labels = length(unique(training[,ncol(training)]))
input_layer_size = ncol(training)-1
hidden_layer_size = round((input_layer_size+num_labels)*1/3,0)
max_iter = 300
#random initialize theta
theta1 = randInitialWeight(input_layer_size, hidden_layer_size)
theta2 = randInitialWeight(hidden_layer_size, num_labels)
initial_parameter = append(as.vector(theta1), as.vector(theta2))
theta_training = NeuralNetworkMain(training, hidden_layer_size, lambda, max_iter, initial_parameter)
theta_training_1 = theta_training[[1]]
theta_training_2 = theta_training[[2]]
theta_training = append(theta_training_1, theta_training_2)
X_train = training[,-ncol(training)]
y_train = training[,ncol(training)]
predict_train = predict(theta_training_1, theta_training_2, X_train)
result = sum(predict_train == y_train)/ length(y_train)
result
X = test[ ,-ncol(test)]
y = test[ ,ncol(test)]
prediction = predict(theta_training_1, theta_training_2, X)
result = sum(prediction == y) / length(y)
result
lambda = 1
num_labels = length(unique(training[,ncol(training)]))
input_layer_size = ncol(training)-1
hidden_layer_size = round((input_layer_size+num_labels)*1/3,0)
#random initialize theta
max_iter = 300
theta1 = randInitialWeight(input_layer_size, hidden_layer_size)
theta2 = randInitialWeight(hidden_layer_size, num_labels)
initial_parameter = append(as.vector(theta1), as.vector(theta2))
theta_training = NeuralNetworkMain(training, hidden_layer_size, lambda, max_iter, initial_parameter)
theta_training_1 = theta_training[[1]]
theta_training_2 = theta_training[[2]]
theta_training = append(theta_training_1, theta_training_2)
X_train = training[,-ncol(training)]
y_train = training[,ncol(training)]
predict_train = predict(theta_training_1, theta_training_2, X_train)
result = sum(predict_train == y_train)/ length(y_train)
result
X = test[ ,-ncol(test)]
y = test[ ,ncol(test)]
prediction = predict(theta_training_1, theta_training_2, X)
result = sum(prediction == y) / length(y)
result
source('C:/Users/Choi\'s Family/Desktop/Predict Stock Price/buildDataMain.R')
source('C:/Users/Choi\'s Family/Desktop/Predict Stock Price/main3(whole data).R')
X_train = training[,-ncol(training)]
y_train = training[,ncol(training)]
predict_train = predict(theta_training_1, theta_training_2, X_train)
result = sum(predict_train == y_train)/ length(y_train)
result
X = test[ ,-ncol(test)]
y = test[ ,ncol(test)]
prediction = predict(theta_training_1, theta_training_2, X)
result = sum(prediction == y) / length(y)
result
source('C:/Users/Choi\'s Family/Desktop/Predict Stock Price/buildDataMain.R')
View(FSD_windows_month)
source('C:/Users/Choi\'s Family/Desktop/Predict Stock Price/main3(whole data).R')
source('C:/Users/Choi\'s Family/Desktop/Predict Stock Price/buildDataMain.R')
source('C:/Users/Choi\'s Family/Desktop/Predict Stock Price/main3(whole data).R')
X_train = training[,-ncol(training)]
y_train = training[,ncol(training)]
predict_train = predict(theta_training_1, theta_training_2, X_train)
result = sum(predict_train == y_train)/ length(y_train)
result
X = test[ ,-ncol(test)]
y = test[ ,ncol(test)]
prediction = predict(theta_training_1, theta_training_2, X)
result = sum(prediction == y) / length(y)
result
source('C:/Users/Choi\'s Family/Desktop/Predict Stock Price/buildDataMain.R')
#=====training/test set =====
lambda = 1
num_labels = length(unique(training[,ncol(training)]))
input_layer_size = ncol(training)-1
hidden_layer_size = round((input_layer_size+num_labels)*1/6,0)
max_iter = 300
#random initialize theta
theta1 = randInitialWeight(input_layer_size, hidden_layer_size)
theta2 = randInitialWeight(hidden_layer_size, num_labels)
initial_parameter = append(as.vector(theta1), as.vector(theta2))
theta_training = NeuralNetworkMain(training, hidden_layer_size, lambda, max_iter, initial_parameter)
theta_training_1 = theta_training[[1]]
theta_training_2 = theta_training[[2]]
theta_training = append(theta_training_1, theta_training_2)
X_train = training[,-ncol(training)]
y_train = training[,ncol(training)]
predict_train = predict(theta_training_1, theta_training_2, X_train)
result = sum(predict_train == y_train)/ length(y_train)
result
X = test[ ,-ncol(test)]
y = test[ ,ncol(test)]
prediction = predict(theta_training_1, theta_training_2, X)
result = sum(prediction == y) / length(y)
result
source('C:/Users/Choi\'s Family/Desktop/Predict Stock Price/buildDataMain.R')
lambda = 1
num_labels = length(unique(training[,ncol(training)]))
input_layer_size = ncol(training)-1
hidden_layer_size = round((input_layer_size+num_labels)*1/6,0)
max_iter = 300
#random initialize theta
theta1 = randInitialWeight(input_layer_size, hidden_layer_size)
theta2 = randInitialWeight(hidden_layer_size, num_labels)
initial_parameter = append(as.vector(theta1), as.vector(theta2))
theta_training = NeuralNetworkMain(training, hidden_layer_size, lambda, max_iter, initial_parameter)
theta_training_1 = theta_training[[1]]
theta_training_2 = theta_training[[2]]
theta_training = append(theta_training_1, theta_training_2)
X_train = training[,-ncol(training)]
y_train = training[,ncol(training)]
predict_train = predict(theta_training_1, theta_training_2, X_train)
result = sum(predict_train == y_train)/ length(y_train)
result
X = test[ ,-ncol(test)]
y = test[ ,ncol(test)]
prediction = predict(theta_training_1, theta_training_2, X)
result = sum(prediction == y) / length(y)
result
source('C:/Users/Choi\'s Family/Desktop/Predict Stock Price/buildDataMain.R')
source('C:/Users/Choi\'s Family/Desktop/Predict Stock Price/main3(whole data).R')
source('C:/Users/Choi\'s Family/Desktop/Predict Stock Price/buildDataMain.R')
source('C:/Users/Choi\'s Family/Desktop/Predict Stock Price/main3(whole data).R')
X_train = training[,-ncol(training)]
y_train = training[,ncol(training)]
predict_train = predict(theta_training_1, theta_training_2, X_train)
result = sum(predict_train == y_train)/ length(y_train)
result
X = test[ ,-ncol(test)]
y = test[ ,ncol(test)]
prediction = predict(theta_training_1, theta_training_2, X)
result = sum(prediction == y) / length(y)
result
source('C:/Users/Choi\'s Family/Desktop/Predict Stock Price/buildDataMain.R')
source('C:/Users/Choi\'s Family/Desktop/Predict Stock Price/main3(whole data).R')
source('C:/Users/Choi\'s Family/Desktop/Predict Stock Price/buildDataMain.R')
source('C:/Users/Choi\'s Family/Desktop/Predict Stock Price/main3(whole data).R')
theta_training = NeuralNetworkMain(training, hidden_layer_size, lambda, max_iter, initial_parameter)
theta_training_1 = theta_training[[1]]
theta_training_2 = theta_training[[2]]
theta_training = append(theta_training_1, theta_training_2)
X_train = training[,-ncol(training)]
y_train = training[,ncol(training)]
predict_train = predict(theta_training_1, theta_training_2, X_train)
result = sum(predict_train == y_train)/ length(y_train)
result
X = test[ ,-ncol(test)]
y = test[ ,ncol(test)]
prediction = predict(theta_training_1, theta_training_2, X)
result = sum(prediction == y) / length(y)
result
theta1 = randInitialWeight(input_layer_size, hidden_layer_size)
theta2 = randInitialWeight(hidden_layer_size, num_labels)
initial_parameter = append(as.vector(theta1), as.vector(theta2))
theta_training = NeuralNetworkMain(training, hidden_layer_size, lambda, max_iter, initial_parameter)
theta_training_1 = theta_training[[1]]
theta_training_2 = theta_training[[2]]
theta_training = append(theta_training_1, theta_training_2)
X_train = training[,-ncol(training)]
y_train = training[,ncol(training)]
predict_train = predict(theta_training_1, theta_training_2, X_train)
result = sum(predict_train == y_train)/ length(y_train)
result
X = test[ ,-ncol(test)]
y = test[ ,ncol(test)]
prediction = predict(theta_training_1, theta_training_2, X)
result = sum(prediction == y) / length(y)
result
source('C:/Users/Choi\'s Family/Desktop/Predict Stock Price/buildDataMain.R')
source('C:/Users/Choi\'s Family/Desktop/Predict Stock Price/main3(whole data).R')
source('C:/Users/Choi\'s Family/Desktop/Predict Stock Price/buildDataMain.R')
source('C:/Users/Choi\'s Family/Desktop/Predict Stock Price/main3(whole data).R')
source('C:/Users/Choi\'s Family/Desktop/Predict Stock Price/buildDataMain.R')
source('C:/Users/Choi\'s Family/Desktop/Predict Stock Price/main3(whole data).R')
theta_training = NeuralNetworkMain(training, hidden_layer_size, lambda, max_iter, initial_parameter)
theta_training_1 = theta_training[[1]]
theta_training_2 = theta_training[[2]]
theta_training = append(theta_training_1, theta_training_2)
X_train = training[,-ncol(training)]
y_train = training[,ncol(training)]
predict_train = predict(theta_training_1, theta_training_2, X_train)
result = sum(predict_train == y_train)/ length(y_train)
result
X = test[ ,-ncol(test)]
y = test[ ,ncol(test)]
prediction = predict(theta_training_1, theta_training_2, X)
result = sum(prediction == y) / length(y)
result
windowSize = 10
source('C:/Users/Choi\'s Family/Desktop/Predict Stock Price/buildDataMain.R')
source('C:/Users/Choi\'s Family/Desktop/Predict Stock Price/main3(whole data).R')
source('C:/Users/Choi\'s Family/Desktop/Predict Stock Price/buildDataMain.R')
source('C:/Users/Choi\'s Family/Desktop/Predict Stock Price/main3(whole data).R')
source('C:/Users/Choi\'s Family/Desktop/Predict Stock Price/main3(whole data).R')
theta_training = NeuralNetworkMain(training, hidden_layer_size, lambda, max_iter, initial_parameter)
X_train = training[,-ncol(training)]
y_train = training[,ncol(training)]
predict_train = predict(theta_training_1, theta_training_2, X_train)
result = sum(predict_train == y_train)/ length(y_train)
result
X = test[ ,-ncol(test)]
y = test[ ,ncol(test)]
prediction = predict(theta_training_1, theta_training_2, X)
result = sum(prediction == y) / length(y)
result
#=====training/test set =====
lambda = 1
num_labels = length(unique(training[,ncol(training)]))
input_layer_size = ncol(training)-1
hidden_layer_size = round((input_layer_size+num_labels)*1/15,0)
max_iter = 600
#random initialize theta
theta1 = randInitialWeight(input_layer_size, hidden_layer_size)
theta2 = randInitialWeight(hidden_layer_size, num_labels)
initial_parameter = append(as.vector(theta1), as.vector(theta2))
theta_training = NeuralNetworkMain(training, hidden_layer_size, lambda, max_iter, initial_parameter)
theta_training_1 = theta_training[[1]]
theta_training_2 = theta_training[[2]]
theta_training = append(theta_training_1, theta_training_2)
X_train = training[,-ncol(training)]
y_train = training[,ncol(training)]
predict_train = predict(theta_training_1, theta_training_2, X_train)
result = sum(predict_train == y_train)/ length(y_train)
result
X = test[ ,-ncol(test)]
y = test[ ,ncol(test)]
prediction = predict(theta_training_1, theta_training_2, X)
result = sum(prediction == y) / length(y)
result
source('C:/Users/Choi\'s Family/Desktop/Predict Stock Price/buildDataMain.R')
source('C:/Users/Choi\'s Family/Desktop/Predict Stock Price/main3(whole data).R')
X_train = training[,-ncol(training)]
y_train = training[,ncol(training)]
predict_train = predict(theta_training_1, theta_training_2, X_train)
result = sum(predict_train == y_train)/ length(y_train)
result
X = test[ ,-ncol(test)]
y = test[ ,ncol(test)]
prediction = predict(theta_training_1, theta_training_2, X)
result = sum(prediction == y) / length(y)
result
source('C:/Users/Choi\'s Family/Desktop/Predict Stock Price/main3(whole data).R')
X_train = training[,-ncol(training)]
y_train = training[,ncol(training)]
predict_train = predict(theta_training_1, theta_training_2, X_train)
result = sum(predict_train == y_train)/ length(y_train)
result
X = test[ ,-ncol(test)]
y = test[ ,ncol(test)]
prediction = predict(theta_training_1, theta_training_2, X)
result = sum(prediction == y) / length(y)
result
dim(training)
source('C:/Users/Choi\'s Family/Desktop/Predict Stock Price/buildDataMain.R')
source('C:/Users/Choi\'s Family/Desktop/Predict Stock Price/main3(whole data).R')
X_train = training[,-ncol(training)]
y_train = training[,ncol(training)]
predict_train = predict(theta_training_1, theta_training_2, X_train)
result = sum(predict_train == y_train)/ length(y_train)
result
X = test[ ,-ncol(test)]
y = test[ ,ncol(test)]
prediction = predict(theta_training_1, theta_training_2, X)
result = sum(prediction == y) / length(y)
result
source('C:/Users/Choi\'s Family/Desktop/Predict Stock Price/main3(whole data).R')
X_train = training[,-ncol(training)]
y_train = training[,ncol(training)]
predict_train = predict(theta_training_1, theta_training_2, X_train)
result_train = sum(predict_train == y_train)/ length(y_train)
print(result_train)
X = test[ ,-ncol(test)]
y = test[ ,ncol(test)]
prediction = predict(theta_training_1, theta_training_2, X)
result_test = sum(prediction == y) / length(y)
print(result_test)
source('C:/Users/Choi\'s Family/Desktop/Predict Stock Price/main3(whole data).R')
source('C:/Users/Choi\'s Family/Desktop/Predict Stock Price/main3(whole data).R')
source('C:/Users/Choi\'s Family/Desktop/Predict Stock Price/main3(whole data).R')
source('C:/Users/Choi\'s Family/Desktop/Predict Stock Price/main3(whole data).R')
source('C:/Users/Choi\'s Family/Desktop/Predict Stock Price/main3(whole data).R')
source('C:/Users/Choi\'s Family/Desktop/Predict Stock Price/main3(whole data).R')
source('C:/Users/Choi\'s Family/Desktop/Predict Stock Price/main3(whole data).R')
source('C:/Users/Choi\'s Family/Desktop/Predict Stock Price/main3(whole data).R')
source('C:/Users/Choi\'s Family/Desktop/Predict Stock Price/main3(whole data).R')
source('C:/Users/Choi\'s Family/Desktop/Predict Stock Price/main3(whole data).R')
source('C:/Users/Choi\'s Family/Desktop/Predict Stock Price/main3(whole data).R')
source('C:/Users/Choi\'s Family/Desktop/Predict Stock Price/main3(whole data).R')
source('C:/Users/Choi\'s Family/Desktop/Predict Stock Price/main3(whole data).R')
source('C:/Users/Choi\'s Family/Desktop/Predict Stock Price/main3(whole data).R')
source('C:/Users/Choi\'s Family/Desktop/Predict Stock Price/main3(whole data).R')
source('C:/Users/Choi\'s Family/Desktop/Predict Stock Price/main3(whole data).R')
source('C:/Users/Choi\'s Family/Desktop/Predict Stock Price/main3(whole data).R')
source('C:/Users/Choi\'s Family/Desktop/Predict Stock Price/main3(whole data).R')
source('C:/Users/Choi\'s Family/Desktop/Predict Stock Price/main3(whole data).R')
source('C:/Users/Choi\'s Family/Desktop/Predict Stock Price/main3(whole data).R')
source('C:/Users/Choi\'s Family/Desktop/Predict Stock Price/main3(whole data).R')
source('C:/Users/Choi\'s Family/Desktop/Predict Stock Price/main3(whole data).R')
source('C:/Users/Choi\'s Family/Desktop/Predict Stock Price/main3(whole data).R')
source('C:/Users/Choi\'s Family/Desktop/Predict Stock Price/main3(whole data).R')
source('C:/Users/Choi\'s Family/Desktop/Predict Stock Price/main3(whole data).R')
source('C:/Users/Choi\'s Family/Desktop/Predict Stock Price/main3(whole data).R')
source('C:/Users/Choi\'s Family/Desktop/Predict Stock Price/main3(whole data).R')
source('C:/Users/Choi\'s Family/Desktop/Predict Stock Price/main3(whole data).R')
source('C:/Users/Choi\'s Family/Desktop/Predict Stock Price/buildDataMain.R')
source('C:/Users/Choi\'s Family/Desktop/Predict Stock Price/main3(whole data).R')
source('C:/Users/Choi\'s Family/Desktop/Predict Stock Price/main3(whole data).R')
source('C:/Users/Choi\'s Family/Desktop/Predict Stock Price/main3(whole data).R')
source('C:/Users/Choi\'s Family/Desktop/Predict Stock Price/main3(whole data).R')
num_labels = length(unique(training2[,ncol(training2)]))
input_layer_size = ncol(training2)-1
hidden_layer_size = round((input_layer_size+num_labels)*1/15,0)
theta_training = NeuralNetworkMain(training2, hidden_layer_size, lambda, max_iter, initial_parameter)
class(training2)
dim(train2)
dim(training2
)
theta_training = NeuralNetworkMain(training2, hidden_layer_size, lambda, max_iter, initial_parameter)
dim(training2)
dim(training)
source('C:/Users/Choi\'s Family/Desktop/Predict Stock Price/main3(whole data).R')
source('C:/Users/Choi\'s Family/Desktop/Predict Stock Price/main3(whole data).R')
source('C:/Users/Choi\'s Family/Desktop/Predict Stock Price/main3(whole data).R')
source('C:/Users/Choi\'s Family/Desktop/Predict Stock Price/main3(whole data).R')
source('C:/Users/Choi\'s Family/Desktop/Predict Stock Price/main3(whole data).R')
hidden_layer_size
source('C:/Users/Choi\'s Family/Desktop/Predict Stock Price/main3(whole data).R')
source('C:/Users/Choi\'s Family/Desktop/Predict Stock Price/main3(whole data).R')
hidden_layer_size
source('C:/Users/Choi\'s Family/Desktop/Predict Stock Price/main3(whole data).R')
source('C:/Users/Choi\'s Family/Desktop/Predict Stock Price/buildDataMain.R')
dim(FSD2012)
source('C:/Users/Choi\'s Family/Desktop/Predict Stock Price/main(yearly).R')
View(result_table)
source('C:/Users/Choi\'s Family/Desktop/Predict Stock Price/main(yearly).R')
View(result_table)
source('C:/Users/Choi\'s Family/Desktop/Predict Stock Price/main3(whole data).R')
View(combinedData)
linear3 = buildLinearMatrix(combinedData, 3)
View(linear3)
linear5 = buildLinearmatrix(combinedData, 5)
linear5 = buildLinearMatrix(combinedData, 5)
View(diff_combinedData)
colnames(combinedData)
colnames(diff_combinedData)
#=====building data main=====
#read y value and discretize
y = read.csv("./Data/Apple_Diff_.csv")
y = y[nrow(y):1, ]
#build datas
CommoData = buildCommoData()
CommoData = lapply(CommoData, na.locf)
CommoData = as.data.frame(CommoData)
IndexData = buildIndexData()
IndexData = lapply(IndexData, na.locf)
IndexData = as.data.frame(IndexData)
CurData = buildCurrencyData()
CurData = lapply(CurData, na.locf)
CurData = as.data.frame(CurData)
MonthData = buildMonthData()
correlationData = read.csv(file = "zscore_cor_matrix.csv")
UnionPacific = read.csv(file = "./Data/UnionPacific_.csv")
UnionPacific = UnionPacific[nrow(UnionPacific):1, ]
source('C:/Users/Choi\'s Family/Desktop/Predict Stock Price/header.R')
#=====building data main=====
#read y value and discretize
y = read.csv("./Data/Apple_Diff_.csv")
y = y[nrow(y):1, ]
#build datas
CommoData = buildCommoData()
CommoData = lapply(CommoData, na.locf)
CommoData = as.data.frame(CommoData)
IndexData = buildIndexData()
IndexData = lapply(IndexData, na.locf)
IndexData = as.data.frame(IndexData)
CurData = buildCurrencyData()
CurData = lapply(CurData, na.locf)
CurData = as.data.frame(CurData)
MonthData = buildMonthData()
correlationData = read.csv(file = "zscore_cor_matrix.csv")
UnionPacific = read.csv(file = "./Data/UnionPacific_.csv")
UnionPacific = UnionPacific[nrow(UnionPacific):1, ]
combinedData = cbind(UnionPacific[,-1],CommoData[,-1], IndexData[,-1],CurData[,-1],y[,-1])
colnames(combinedData)
diff_combinedData = apply(combinedData[nrow(combinedData):1, ], 2, diff)
diff_combinedData = -diff_combinedData[nrow(diff_combinedData):1, ]
colnames(diff_combinedData)
fullStackData = diff_combinedData
windowSize = 3
FSD_windows = buildWindowMatrix(fullStackData, windowSize)
colnames(FSD_windows)
colnames(FSD_windows)[ncol(FSD_windows)] = "Target"
FSD_windows_month = cbind(MonthData[-1, ], FSD_windows)
colnames(FSD_windows)
#=====building data main=====
#read y value and discretize
y = read.csv("./Data/Apple_Diff_.csv")
y = y[nrow(y):1, ]
#build datas
CommoData = buildCommoData()
CommoData = lapply(CommoData, na.locf)
CommoData = as.data.frame(CommoData)
IndexData = buildIndexData()
IndexData = lapply(IndexData, na.locf)
IndexData = as.data.frame(IndexData)
CurData = buildCurrencyData()
CurData = lapply(CurData, na.locf)
CurData = as.data.frame(CurData)
MonthData = buildMonthData()
correlationData = read.csv(file = "zscore_cor_matrix.csv")
UnionPacific = read.csv(file = "./Data/UnionPacific_.csv")
UnionPacific = UnionPacific[nrow(UnionPacific):1, ]
#combine datas all together, take out "Date" column
combinedData = cbind(UnionPacific[,-1],CommoData[,-1], IndexData[,-1],CurData[,-1],Target = y[,-1])
linear3 = buildLinearMatrix(combinedData, 3)
linear5 = buildLinearMatrix(combinedData, 5)
linear10 = buildLinearMatrix(combinedData, 10)
#make a new "difference" data table using combined data
diff_combinedData = apply(combinedData[nrow(combinedData):1, ], 2, diff)
diff_combinedData = -diff_combinedData[nrow(diff_combinedData):1, ]
#build windows data, pass parameter size of window
windowSize = 10
fullStackData = diff_combinedData
FSD_windows = buildWindowMatrix(fullStackData, windowSize)
dim(FSD_windows)
dim(linear10)
FSD_windows = cbind(linear3, linear5, linear10,FSD_windows)
dim(linear5)
dim(linear10)
linear3 = linear3[-1, ]
linear5 = linear5[-1, ]
linear5 = linear10[-1, ]
a
FSD_windows = cbind(linear3, linear5, linear10, FSD_windows)
dim(linear3)
dim(linear10)
linear3 = buildLinearMatrix(combinedData, 3)
linear5 = buildLinearMatrix(combinedData, 5)
linear10 = buildLinearMatrix(combinedData, 10)
windowSize = 10
fullStackData = diff_combinedData
FSD_windows = buildWindowMatrix(fullStackData, windowSize)
FSD_windows = cbind(linear3, linear5, linear10, FSD_windows)
dim(linear10)
linear3 = linear3[-1, ]
linear5 = linear5[-1, ]
linear10 = linear10[-1, ]
windowSize = 10
fullStackData = diff_combinedData
FSD_windows = buildWindowMatrix(fullStackData, windowSize)
FSD_windows = cbind(linear3, linear5, linear10, FSD_windows)
colnames(FSD_windows)[ncol(FSD_windows)] = "Target"
FSD_windows_month = cbind(MonthData[-1, ], FSD_windows)
FSD_windows = FSD_windows[-c(1:windowSize), ]
FSD_windows_month = as.matrix(FSD_windows_month[-c(1:(windowSize-1)), ])
dim(FSD_windows)
source('C:/Users/Choi\'s Family/Desktop/Predict Stock Price/buildDataMain.R')
source('C:/Users/Choi\'s Family/Desktop/Predict Stock Price/main3(whole data).R')
training = FSD_windows_month[1:3090, ]
test = FSD_windows_month[3091:nrow(FSD_windows), ]
training2 = FSD_windows[1:3090, ]
test2 = FSD_windows[3091:nrow(FSD_windows), ]
source('C:/Users/Choi\'s Family/Desktop/Predict Stock Price/main3(whole data).R')
source('C:/Users/Choi\'s Family/Desktop/Predict Stock Price/main3(whole data).R')
source('C:/Users/Choi\'s Family/Desktop/Predict Stock Price/main3(whole data).R')
source('C:/Users/Choi\'s Family/Desktop/Predict Stock Price/main3(whole data).R')
source('C:/Users/Choi\'s Family/Desktop/Predict Stock Price/main3(whole data).R')
source('C:/Users/Choi\'s Family/Desktop/Predict Stock Price/main3(whole data).R')
dim(FSD_windows)
source('C:/Users/Choi\'s Family/Desktop/Predict Stock Price/main3(whole data).R')
source('C:/Users/Choi\'s Family/Desktop/Predict Stock Price/main3(whole data).R')
source('C:/Users/Choi\'s Family/Desktop/Predict Stock Price/main3(whole data).R')
source('C:/Users/Choi\'s Family/Desktop/Predict Stock Price/main3(whole data).R')
colnames(FSD_windows)
source('C:/Users/Choi\'s Family/Desktop/Predict Stock Price/main3(whole data).R')
source('C:/Users/Choi\'s Family/Desktop/Predict Stock Price/main3(whole data).R')
source('C:/Users/Choi\'s Family/Desktop/Predict Stock Price/buildDataMain.R')
source('C:/Users/Choi\'s Family/Desktop/Predict Stock Price/main3(whole data).R')
source('C:/Users/Choi\'s Family/Desktop/Predict Stock Price/main3(whole data).R')
source('C:/Users/Choi\'s Family/Desktop/Predict Stock Price/buildDataMain.R')
source('C:/Users/Choi\'s Family/Desktop/Predict Stock Price/main3(whole data).R')
source('C:/Users/Choi\'s Family/Desktop/Predict Stock Price/main3(whole data).R')
source('C:/Users/Choi\'s Family/Desktop/Predict Stock Price/main3(whole data).R')
source('C:/Users/Choi\'s Family/Desktop/Predict Stock Price/main3(whole data).R')
source('C:/Users/Choi\'s Family/Desktop/Predict Stock Price/main3(whole data).R')
source('C:/Users/Choi\'s Family/Desktop/Predict Stock Price/main3(whole data).R')
source('C:/Users/Choi\'s Family/Desktop/Predict Stock Price/main3(whole data).R')
source('C:/Users/Choi\'s Family/Desktop/Predict Stock Price/main3(whole data).R')
source('C:/Users/Choi\'s Family/Desktop/Predict Stock Price/main3(whole data).R')
source('C:/Users/Choi\'s Family/Desktop/Predict Stock Price/main3(whole data).R')
source('C:/Users/Choi\'s Family/Desktop/Predict Stock Price/buildDataMain.R')
source('C:/Users/Choi\'s Family/Desktop/Predict Stock Price/main3(whole data).R')
source('C:/Users/Choi\'s Family/Desktop/Predict Stock Price/buildDataMain.R')
source('C:/Users/Choi\'s Family/Desktop/Predict Stock Price/main3(whole data).R')
source('C:/Users/Choi\'s Family/Desktop/Predict Stock Price/main3(whole data).R')
source('C:/Users/Choi\'s Family/Desktop/Predict Stock Price/main3(whole data).R')
source('C:/Users/Choi\'s Family/Desktop/Predict Stock Price/main3(whole data).R')
source('C:/Users/Choi\'s Family/Desktop/Predict Stock Price/buildDataMain.R')
source('C:/Users/Choi\'s Family/Desktop/Predict Stock Price/main3(whole data).R')
source('C:/Users/Choi\'s Family/Desktop/Predict Stock Price/main3(whole data).R')
source('C:/Users/Choi\'s Family/Desktop/Predict Stock Price/buildDataMain.R')
source('C:/Users/Choi\'s Family/Desktop/Predict Stock Price/main3(whole data).R')
source('C:/Users/Choi\'s Family/Desktop/Predict Stock Price/main3(whole data).R')
